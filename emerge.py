# -*- coding: utf-8 -*-
"""Emergence Simulation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UT5WZ7HCr4HPF0HfoPLugf5I5ZtTuaaV

## Constant Declaration
"""

COLONY_START_SIZE = 100
ITERATIONS = 10000

"""## Imports"""

from tqdm import tqdm 
import random
from matplotlib import pyplot as plt
import pandas as pd

"""## Ant Class"""

class Ant:

    def __init__(self, setrole):
        self.role = setrole
        self.batch = 0
        self.memory = {
            "worker": 0,
            "harvester": 0,
            "soldier": 0,
            "caretaker": 0
        }


    def meet(self, other_type):
        self.memory[other_type] += 1
        self.batch += 1
        # print("Batch is now:", self.batch)
        # print("Memory is now:" , self.memory)
        if self.batch >= 10:
            total = 0
            for key in self.memory.keys():
                total += self.memory[key]
            # print(total)
            # print(self.memory)
            min_frac = 100
            curpop = ''
            for key in self.memory.keys():
                current_pop = self.memory[key]
                # percentage calculation and checking whether less than 10% of the ants it has met is
                frac = current_pop / total
                if frac < min_frac:
                    min_frac = frac
                    curpop = key
                # print(frac, key, total, current_pop)
            if min_frac < 0.25:
                to_type = curpop
                # changing the role
                saverole = self.role
                self.role = to_type
                self.batch = 0
                # we need to reset its memory
                self.memory = {
                    "worker": 0,
                    "harvester": 0,
                    "soldier": 0,
                    "caretaker": 0
                }
                    # print("TOTYPECHANGEIS:", saverole, to_type)
        # print("YOU SEE ME ROLLING",self.role)
        return self.role

"""## Colony Class"""

class Colony:

    def __init__(self):
        with open('meetlog.csv', 'w+') as x:
            pass
        with open('creation.csv', 'w+') as f:
            pass
        with open('changelog.csv', 'w+') as f:
            pass
        with open('ant_data.csv', 'w+') as f:
            pass
        self.index = {
            "worker": 0,
            "harvester": 0,
            "soldier": 0,
            "caretaker": 0
        }

        self.array = []

        for i in range(COLONY_START_SIZE):
            types = ['worker', 'harvester', 'soldier', 'caretaker']
            choice_of_ant = random.randint(0, 3)
            newAnt = Ant(types[choice_of_ant])
            with open('creation.csv', 'a') as f:
                f.write(f'{newAnt.role} \n')
            self.array.append(newAnt)
            self.index[newAnt.role] += 1

        print(self.index)


    def random_interaction(self):
        choice_1 = random.randint(0, len(self.array)-1)
        choice_2 = random.randint(0, len(self.array)-1)

        if choice_1 == choice_2:
            return self.random_interaction()

        else:
            with open('meetlog.csv', 'a') as f:
                f.write(f'{self.array[choice_1].role}, {self.array[choice_2].role} \n')
            saveChoice1 = self.array[choice_1].role
            saveChoice2 = self.array[choice_2].role
            resp1 = self.array[choice_1].meet(self.array[choice_2].role)
            resp2 = self.array[choice_2].meet(self.array[choice_1].role)

            if saveChoice1 != resp1:
                with open('changelog.csv', 'a') as f:
                    f.write(f'{saveChoice1}, {resp1} \n')
                    self.index[saveChoice1] -= 1
                    self.index[resp1] += 1
            if saveChoice2 != resp2:
                with open('changelog.csv', 'a') as f:
                    f.write(f'{saveChoice2}, {resp2} \n')
                    self.index[saveChoice2] -= 1
                    self.index[resp2] += 1


    def kill_ants_single_on_command(self):

        """
        Simulates an environment by killing a random number of ants.
        Select a random ant, save its role, remove it, and update our indexes
        """
        if True:
            ant_types = ['worker', 'harvester', 'soldier', 'caretaker']
            random_type = random.randint(0, 3)
            num_ants_killed = 20
            while num_ants_killed > 0:
                try:
                    for i in range(len(self.array)):
                        if self.array[i].role == ant_types[random_type]:
                            self.index[ant_types[random_type]] -= 1
                            del self.array[i]
                            num_ants_killed -= 1
                        if i == len(self.array) - 1:
                            num_ants_killed = 0
                except IndexError:
                    num_ants_killed = 0

    def write_to_file(self):
        with open('ant_data.csv', 'a') as f:
            f.write(
                f"{self.index['worker']}, {self.index['harvester']}, {self.index['soldier']}, {self.index['caretaker']}, {0.01 * (self.index['worker'] + self.index['harvester'] + self.index['soldier'] + self.index['caretaker'])}\n")

    def add_new_ants(self):
        """
        Adds a random number of ants after each episode
        """
        rand = random.randint(0, 5)
        for i in range(rand):
            ant_types = ['worker', 'soldier', 'caretaker', 'harvester']
            choice_of_ant = random.randint(0, 3)
            ant_object = Ant(ant_types[choice_of_ant])
            self.index[ant_types[choice_of_ant]] += 1
            self.array.append(ant_object)

    def kill_ants(self):
        """
        Simulates an environment by killing a random number of ants.
        Select a random ant, save its role, remove it, and update our indexes
        """
        num_ants_killed = random.randint(0, 10)
        for i in range(num_ants_killed):
            killed_ant = random.randint(0, len(self.array) - 1)
            killed_ant_role = self.array[killed_ant].role
            self.index[killed_ant_role] -= 1
            del self.array[killed_ant]

"""## Graph Plot"""

def plot_mpl(filesavepath):

    plt.style.use('seaborn-poster')
    f, (ax1, ax2) = plt.subplots(2, 1)
    f.tight_layout(pad=5.0)
    df = pd.read_csv('ant_data.csv', header=None)
    ax1.set(title="General Population Growth")
    ax1.plot(df[0])
    ax1.plot(df[1])
    ax1.plot(df[2])
    ax1.plot(df[3])

    ax2.set(title="Percentage of Species Distribution")
    ax2.plot(df[0] / df[4])
    ax2.plot(df[1] / df[4])
    ax2.plot(df[2] / df[4])
    ax2.plot(df[3] / df[4])
    plt.savefig(filesavepath, dpi=500, bbox_inches='tight')
    plt.show()

# plot_mpl()

"""## Main Code"""

c1 = Colony()
for i in tqdm(range(1, ITERATIONS*10)):
    if i%(ITERATIONS*5) == 0:
        c1.kill_ants_single_on_command()
    c1.add_new_ants()
    for i in tqdm(range(len(c1.array)*len(c1.array))):
        if i%100 == 0:
            c1.write_to_file()
        c1.random_interaction()

    # c1.kill_ants()
    c1.write_to_file()
print(c1.index)
plot_mpl('plot1.png')

c2 = Colony()
for i in tqdm(range(1, 10000)):
    if i%5000 == 0:
        c2.kill_ants_single_on_command()
    c2.add_new_ants()
    # c2.kill_ants()
    c2.write_to_file()
print(c2.index)
plot_mpl(plot2.png)